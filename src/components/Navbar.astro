---
import { Icon } from "astro-icon/components";
import { cardConfig, navBarConfig, siteConfig } from "../config";
import { LinkPresets } from "../constants/link-presets";
import { LinkPreset, type NavBarLink } from "../types/config";
import { url } from "../utils/url-utils";
import LightDarkSwitch from "./LightDarkSwitch.svelte";
import Search from "./Search.svelte";
import DisplaySettings from "./widget/DisplaySettings.svelte";

const className = Astro.props.class;

let links: NavBarLink[] = navBarConfig.links.map(
	(item: NavBarLink | LinkPreset): NavBarLink => {
		if (typeof item === "number") {
			return LinkPresets[item];
		}
		return item;
	},
);
---
<div id="navbar" class="z-50 onload-animation">
    <div class="absolute h-8 left-0 right-0 -top-8 backdrop-blur-md transition" style="background-color: color-mix(in srgb, var(--card-bg) calc(var(--card-opacity) * 100%), transparent);"></div> <!-- used for onload animation -->
    <div class:list={[
        className,
        "!overflow-visible w-full h-[4.5rem] !rounded-t-none !rounded-b-[var(--radius-large)] navbar-glass"]}
        style={`background-color: color-mix(in srgb, var(--card-bg) calc(var(--card-opacity) * 100%), transparent)`}>
        <div class="relative flex items-center px-4 h-full w-full">
        <!-- 左侧：网站标题 -->
        <a href={url('/')} class="btn-plain scale-animation rounded-lg h-[3.25rem] px-5 font-bold active:scale-95 flex-shrink-0">
            <div class="flex flex-row text-[var(--primary)] items-center text-md">
                <img src="https://img.314926.xyz/images/2025/09/20/zsx-avatar.webp" alt="logo" class="w-6 h-6 mr-2" />
                {navBarConfig.showHomeIcon && <Icon name="material-symbols:home-outline-rounded" class="text-[1.75rem] mb-1 mr-2" />}
                {siteConfig.title}
            </div>
        </a>
        
        <!-- 中间：导航链接 -->
        <div class="hidden md:flex absolute left-1/2 transform -translate-x-1/2">
            {links.map((l) => {
                if (l.children && l.children.length > 0) {
                    return (
                        <div class="relative group">
                            <button class="btn-plain scale-animation rounded-lg h-11 font-bold px-5 active:scale-95 flex items-center">
                                <div class="flex items-center">
                                    {l.icon && <Icon name={l.icon} class="text-[1rem] mr-2" />}
                                    {l.name}
                                    <Icon name="material-symbols:keyboard-arrow-down-rounded" class="text-[1.25rem] ml-1 transition-transform group-hover:rotate-180" />
                                </div>
                            </button>
                            <div class="dropdown-menu absolute top-full left-1/2 -translate-x-1/2 mt-2 bg-[var(--card-bg)] rounded-xl shadow-lg border border-[var(--line-divider)] opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-50 flex flex-row whitespace-nowrap max-h-[60vh] overflow-y-auto">
                                {l.children.map((child, index) => (
                                    <a href={child.external ? child.url : url(child.url)} 
                                       target={child.external ? "_blank" : null}
                                       class={`flex items-center px-6 py-3 text-base !text-black dark:!text-gray-300 hover:!text-gray-900 dark:hover:!text-white hover:bg-[var(--btn-plain-bg-hover)] transition-colors ${index === 0 ? 'rounded-l-xl' : ''} ${index === l.children.length - 1 ? 'rounded-r-xl' : ''}`}>
                                        {child.icon && <Icon name={child.icon} class="text-[1rem] mr-3" />}
                                        <span>{child.name}</span>
                                        {child.external && <Icon name="fa6-solid:arrow-up-right-from-square" class="text-[0.75rem] text-black/[0.3] dark:text-white/[0.3] ml-1" />}
                                    </a>
                                ))}
                            </div>
                        </div>
                    );
                } else {
                    return <a aria-label={l.name} href={l.external ? l.url : url(l.url)} target={l.external ? "_blank" : null}
                              class="btn-plain scale-animation rounded-lg h-11 font-bold px-5 active:scale-95"
                    >
                        <div class="flex items-center">
                            {l.icon && <Icon name={l.icon} class="text-[1rem] mr-2" />}
                            {l.name}
                            {l.external && <Icon name="fa6-solid:arrow-up-right-from-square" class="text-[0.875rem] transition -translate-y-[1px] ml-1 text-black/[0.2] dark:text-white/[0.2]"></Icon>}
                        </div>
                    </a>;
                }
            })}
        </div>
        
        <!-- 右侧：搜索和功能按钮 -->
        <div class="flex flex-shrink-0 absolute right-4">
            <!-- 搜索左侧图标链接 - 仅在桌面端显示 -->
            <div class="hidden md:flex">
                {navBarConfig.searchLeftIcons && navBarConfig.searchLeftIcons.map((iconLink) => (
                    <a 
                        href={iconLink.url} 
                        target={iconLink.external ? "_blank" : "_self"}
                        rel={iconLink.external ? "noopener noreferrer" : undefined}
                        aria-label={iconLink.name}
                        class="btn-plain scale-animation rounded-lg w-11 h-11 mr-2 active:scale-90 flex items-center justify-center"
                    >
                        <Icon name={iconLink.icon} class="text-[1.25rem]" />
                    </a>
                ))}
            </div>
            <Search client:only="svelte"></Search>
            {!siteConfig.themeColor.fixed && (
                    <button aria-label="Display Settings" class="btn-plain scale-animation rounded-lg h-11 w-11 active:scale-90" id="display-settings-switch">
                        <Icon name="material-symbols:palette-outline" class="text-[1.25rem]"></Icon>
                    </button>
            )}
            <LightDarkSwitch client:only="svelte"></LightDarkSwitch>
            <button aria-label="Menu" name="Nav Menu" class="btn-plain scale-animation rounded-lg w-11 h-11 active:scale-90 md:!hidden" id="nav-menu-switch">
                <Icon name="material-symbols:menu-rounded" class="text-[1.25rem]"></Icon>
            </button>
        </div>

        <DisplaySettings client:only="svelte"></DisplaySettings>
        </div>
    </div>
</div>

<script>
function switchTheme() {
    if (localStorage.theme === 'dark') {
        document.documentElement.classList.remove('dark');
        localStorage.theme = 'light';
    } else {
        document.documentElement.classList.add('dark');
        localStorage.theme = 'dark';
    }
}

function loadButtonScript() {
    let switchBtn = document.getElementById("scheme-switch");
    if (switchBtn) {
        switchBtn.onclick = function () {
            switchTheme()
        };
    }

    let settingBtn = document.getElementById("display-settings-switch");
    if (settingBtn) {
        settingBtn.onclick = function () {
            let settingPanel = document.getElementById("display-setting");
            if (settingPanel) {
                settingPanel.classList.toggle("float-panel-closed");
            }
        };
    }

    // 移动端菜单按钮现在由 MobileSidebar 组件处理
}

loadButtonScript();

// 设置Swup页面切换事件监听器
const setupSwupHooks = () => {
    if (window.swup && window.swup.hooks) {
        window.swup.hooks.on('page:view', loadButtonScript);
    }
};

// 如果Swup已经初始化，直接设置钩子；否则等待Swup启用
if (window.swup) {
    setupSwupHooks();
} else {
    document.addEventListener('swup:enable', setupSwupHooks);
}
</script>

{import.meta.env.PROD && <script is:inline define:vars={{scriptUrl: url('/pagefind/pagefind.js')}}>
async function loadPagefind() {
    try {
        const response = await fetch(scriptUrl, { method: 'HEAD' });
        if (!response.ok) {
            throw new Error(`Pagefind script not found: ${response.status}`);
        }

        const pagefind = await import(scriptUrl);

        await pagefind.options({
            excerptLength: 20
        });

        window.pagefind = pagefind;

        document.dispatchEvent(new CustomEvent('pagefindready'));
        console.log('Pagefind loaded and initialized successfully, event dispatched.');
    } catch (error) {
        console.error('Failed to load Pagefind:', error);
        window.pagefind = {
            search: () => Promise.resolve({ results: [] }),
            options: () => Promise.resolve(),
        };
        document.dispatchEvent(new CustomEvent('pagefindloaderror'));
        console.log('Pagefind load error, event dispatched.');
    }
}

if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', loadPagefind);
} else {
    loadPagefind();
}
</script>}

<style>
    .navbar-glass {
        backdrop-filter: blur(10px);
        -webkit-backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.1);
    }

    /* 确保在深色模式下也有适当的透明度 */
    :global(.dark) .navbar-glass {
        border: 1px solid rgba(255, 255, 255, 0.05);
    }

    /* 下拉菜单样式 */
    .dropdown-menu {
        backdrop-filter: blur(10px);
        -webkit-backdrop-filter: blur(10px);
        transform: translateX(-50%) translateY(-8px);
        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .group:hover .dropdown-menu {
        transform: translateX(-50%) translateY(0);
    }

    /* 深色模式下的下拉菜单 */
    :global(.dark) .dropdown-menu {
        background-color: rgba(35, 35, 35, 0.95);
        border-color: rgba(255, 255, 255, 0.1);
    }

    /* 下拉菜单项的悬停效果 */
    .dropdown-menu a {
        /* 颜色由 Tailwind 类控制 */
    }
    
    .dropdown-menu a span {
        color: inherit;
    }
    
    .dropdown-menu a:hover {
        background-color: var(--btn-plain-bg-hover);
    }
    
    .dropdown-menu a:hover span {
        color: inherit;
    }

    /* 确保下拉菜单在悬停时保持可见 */
    .group:hover .dropdown-menu,
    .dropdown-menu:hover {
        opacity: 1;
        visibility: visible;
    }
</style>