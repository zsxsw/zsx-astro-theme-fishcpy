---
import { getEntry, render } from "astro:content";
import Markdown from "@components/misc/Markdown.astro";
import { layoutConfig } from "../config";
import I18nKey from "../i18n/i18nKey";
import { i18n } from "../i18n/translation";
import MainGridLayout from "../layouts/MainGridLayout.astro";

// 定义友链项的类型
interface FriendItem {
  title: string;
  siteurl: string;
  imgurl: string;
  desc: string;
  tags: string[];
  openInNewTab: boolean;
}

const friendsPost = await getEntry("spec", "friends");

if (!friendsPost) {
  throw new Error("Friends page content not found");
}

const { Content } = await render(friendsPost);

// 从API获取友链数据
const response = await fetch("https://friends-api.kemeow.top/v2/data.json");
const friendsData = await response.json();
const items: FriendItem[] = friendsData.content.map((item: any) => ({
  title: item.title,
  siteurl: item.url,
  imgurl: item.icon,
  desc: item.description,
  tags: item.labels?.map((label: any) => label.name) || [],
  openInNewTab: true
}));

// 生成友链网格类名
const friendsGridClasses = [
  `grid-cols-${layoutConfig.friends.grid.columns.sm}`,
  `md:grid-cols-${layoutConfig.friends.grid.columns.md}`,
  `lg:grid-cols-${layoutConfig.friends.grid.columns.lg}`,
].join(" ");

// 按分类对友链进行分组
const groupedItems = items.reduce(
  (acc: Record<string, FriendItem[]>, item) => {
    const category = item.tags?.[0] || "其他";
    if (!acc[category]) {
      acc[category] = [];
    }
    acc[category].push(item);
    return acc;
  },
  {} as Record<string, FriendItem[]>
);
---
<MainGridLayout title={i18n(I18nKey.friends)} description={i18n(I18nKey.friends)}>
    <div class="flex w-full rounded-[var(--radius-large)] overflow-hidden relative min-h-32">
        <div class="card-base z-10 px-9 py-6 relative w-full ">
            <h1 class="text-4xl font-bold mb-6 text-neutral-900 dark:text-white">{i18n(I18nKey.friends)}</h1>
            {Object.entries(groupedItems).map(([category, categoryItems]) => {
              // 明确断言 categoryItems 类型为 FriendItem[]
              const items = categoryItems as FriendItem[];
              return (
                <div class="mb-8">
                    <h2 class="text-2xl font-bold mb-4 text-neutral-800 dark:text-neutral-200">{category}</h2>
                    <div class={`grid ${friendsGridClasses} ${layoutConfig.friends.grid.gap}`}>
                        {items.map((item) => (
                            <div class="flex flex-nowrap items-stretch h-28 gap-4 rounded-[var(--radius-large)]">
                                <div class="w-28 h-28 flex-shrink-0 rounded-lg overflow-hidden bg-zinc-200 dark:bg-zinc-900">
                                    <img src={item.imgurl} alt="站点头像" class="w-full h-full object-cover">
                                </div>
                                <div class="grow w-full">
                                    <div class="font-bold transition text-lg text-neutral-900 dark:text-neutral-100 mb-1">{item.title}</div>
                                    <div class="text-neutral-600 dark:text-neutral-400 text-sm font-medium">{item.desc}</div>
                                    <div class:list={["items-center", {"flex": true, "hidden md:flex" : false}]}>
                                        <div class="flex flex-row flex-nowrap items-center">
                                            {(item.tags && item.tags.length > 0) && item.tags.map((tag,i) => (
                                            <div class:list={[{"hidden": i==0}, "mx-1.5 text-[var(--meta-divider)] text-sm" ]}>
                                                /
                                            </div>
                                            <span class="transition text-neutral-600 dark:text-neutral-400 text-sm font-medium">
                                                {tag}
                                            </span>))}
                                            {!(item.tags && item.tags.length > 0) && <div class="transition text-neutral-600 dark:text-neutral-400 text-sm font-medium">{i18n(I18nKey.noTags)}</div>}
                                        </div>
                                    </div>
                                </div>
                                <a href={item.siteurl} 
                                   target={item.openInNewTab ? "_blank" : "_self"} 
                                   rel={item.openInNewTab ? "noopener noreferrer" : undefined} 
                                   class="flex btn-regular w-[3.25rem] rounded-lg bg-[var(--enter-btn-bg)] hover:bg-[var(--enter-btn-bg-hover)] active:bg-[var(--enter-btn-bg-active)] active:scale-95">
                                    <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="transition text-[var(--primary)] text-4xl mx-auto iconify iconify--material-symbols" width="1em" height="1em" viewBox="0 0 24 24">
                                        <path fill="currentColor" d="M12.6 12L8.7 8.1q-.275-.275-.275-.7t.275-.7t.7-.275t.7.275l4.6 4.6q.15.15.213.325t.062.375t-.062.375t-.213.325l-4.6 4.6q-.275.275-.7.275t-.7-.275t-.275-.7t.275-.7z"></path>
                                    </svg>
                                </a>
                            </div>
                        ))}
                    </div>
                </div>
              );
            })}
            <Markdown class="mt-2">
                <Content />
            </Markdown>
        </div>
    </div>
</MainGridLayout>